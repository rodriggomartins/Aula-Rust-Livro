fn main(){
    /*
     * Tipos de Dados
Cada valor em Rust √© de um certo tipo de dados, √© o que diz ao Rust que tipo de os dados est√£o sendo especificados para que ele saiba como trabalhar com esses dados. Weilitll olha para dois subconjuntos de tipo de dados: escalar e composto.

Tenha em mente que Rust √© um estaticamente tipados linguagem, o que significa que deve saber os tipos de todas as vari√°veis em tempo de compila√ß√£o. O compilador geralmente pode inferir que tipo queremos usar com base no valor e como o usamos. Em casos quando muitos tipos s√£o poss√≠veis, como quando convertemos um String para um num√©rico tipo usando parse no ‚ÄúComparando a Adivinha ao Segredo Number‚Äù se√ß√£o em Cap√≠tulo 2, devemos adicionar uma anota√ß√£o de tipo, como esta:
    */ 

    let guess: u32 = "42".parse().expect("Not a number");
    /* Se n√≥s donilitt adicionar o : u32 digite a anota√ß√£o mostrada no c√≥digo anterior, Rust ir√° exibir o seguinte erro, o que significa que o compilador precisa de mais informa√ß√µes de n√≥s para saber que tipo queremos usar:
     */


    /* 
     * Tipos Escalar
A escalar tipo representa um √∫nico valor. A ferrugem tem quatro tipos escalares prim√°rios: inteiros, n√∫meros de ponto flutuante, booleanos e caracteres. Voc√™ pode reconhecer de outras linguagens de programa√ß√£o. Letilitis saltam em como eles funcionam em Rust.
    */


  /* Tipos de Inteiros
   * Um inteiro √© um n√∫mero sem um componente fracion√°rio. N√≥s usamos um inteiro digite o Cap√≠tulo
   * 2, o u32 tipo. Esta declara√ß√£o de tipo indica que o o valor com o qual it‚Äús associado deve ser um
   * inteiro n√£o assinado (tipos inteiros assinados come√ßar com i em vez de u) que ocupa 32 bits de
   * espa√ßo. A tabela 3-1 mostra os tipos inteiros integrados no Rust. Podemos usar qualquer uma
   * dessas variantes para declarar o tipo de um valor inteiro.
   *
   *
   *
   *  Comprimento       Assinado               N√£o assinado
   *      8 BITS           i8                      u8
   *      16 bits          i16                     u16
   *      32 Bits	         i32	                   u32
   *      64 Bits	         i64	                   u64
   *      128 Bits	       i128	                   u128
   *      arco	           isize	                 usize
   *
   * Cada variante pode ser assinada ou n√£o assinada e tem um tamanho expl√≠cito. Assinado e n√£o
   * assinado consulte se √© poss√≠vel que o n√∫mero seja negative‚Äîem outras palavras, se o n√∫mero
   * precisa ter um sinal com ele (assinado) ou se s√≥ ser√° positivo e, portanto, pode ser representado
   * sem um sinal (n√£o assinado). √â como escrever n√∫meros no papel: quando o sinal √© importante, um
   * n√∫mero √© mostrado com um sinal de mais ou um sinal de menos; no entanto, quando √© seguro
   * assumir que o n√∫mero √© positivo, √© mostrado sem sinal. Os n√∫meros assinados s√£o armazenados usando dois liques complementam representa√ß√£o.
   * Cada variante assinada pode armazenar n√∫meros de -(2n - 1) a 2n - 1 1 Inclusivo, onde n √© o n√∫mero de bits que a variante usa. Ent√£o um i8
   * pode armazenar n√∫meros de -(27) a 27 1, que √© igual a 128
   * A 127. Variantes n√£o assinadas podem armazenar n√∫meros de 0 a 2n - 1, ent√£o a u8 pode armazenar n√∫meros de 0 a 28 1, que √© igual a 0 a 255.
   * Al√©m disso, o isize e usize os tipos dependem da arquitetura do computador em que o seu
   * programa est√° a ser executado, o que √© indicado na tabela como ‚Äúarch‚Äù: 64 Bits se voc√™ estiver em
   * uma arquitetura de 64 bits e 32 bits se voc√™ estiver em uma arquitetura de 32 bits arquitetura.
   * Voc√™ pode escrever literais inteiros em qualquer uma das formas mostradas na Tabela 3-2. Nota
   * esse n√∫mero de literais que podem ser v√°rios tipos num√©ricos permite um sufixo de tipo, como
   * 57u8, para designar o tipo. Literais num√©ricos tamb√©m podem usar _ como a separador visual
   * para facilitar a leitura do n√∫mero, como 1_000, que ir√° tenha o mesmo valor que se voc√™ tivesse especificado 1000.
   *
   * N√∫mero literal	          Exemplo
   * Decimal	                98_222
   * Hex	                    0xff
   * Octal	                  0o77
   * Bin√°rio	                0b1111_0000
   * Byte (u8 apenas)	        b'A'
   *
   * Ent√£o, como voc√™ sabe qual tipo de inteiro usar? Se voc√™ n√£o tiver certeza, Rustilitis os padr√µes
   * geralmente s√£o bons lugares para come√ßar: tipos inteiros padr√£o para i32. A situa√ß√£o principal em 
   * que voc√™ usa isize ou usize √© quando indexa√ß√£o algum tipo de cole√ß√£o.
   */

   /*
    * Excesso Integral
    * Letilits diz que voc√™ tem uma vari√°vel de tipo u8 que pode conter valores entre 0 e 255. Se
    * voc√™ tentar alterar a vari√°vel para um valor fora desse intervalo, como 256, √â, transbordamento
    * inteiro ocorrer√°, o que pode resultar em um dos dois comportamentos. Quando voc√™ est√°
    * compilando no modo de depura√ß√£o, o Rust inclui verifica√ß√µes de estouro de inteiros isso faz
    * com que seu programa p√¢nico em tempo de execu√ß√£o se esse comportamento ocorrer.
    */ 

 /* Tipos de Pontos Flutuantes(FLOAT)
  * A ferrugem tamb√©m tem dois tipos primitivos para n√∫meros de ponto flutuante, que s√£o n√∫meros
  * com pontos decimais. Os tipos de ponto flutuante Rustilitis s√£o f32 e f64, que s√£o 32 bits e 64 bits
  * em tamanho, respectivamente. O tipo padr√£o √© f64 porque em CPUs modernas, itroits
  * aproximadamente a mesma velocidade que f32 mas √© capaz de mais precis√£o. Todos os tipos de
  * ponto flutuante s√£o assinados.
  * Aqui est√° um exemplo que mostra n√∫meros de ponto flutuante em a√ß√£o:
  *
  *
  *
    let x = 2.0; // f64

    let y: f32 = 3.0; // f32


  Os n√∫meros de ponto flutuante s√£o representados de acordo com o padr√£o IEEE-754. O f32 tipo √©
  um flutuador de precis√£o √∫nica, e f64 tem dupla precis√£o.
    
  * /




  /*
   * Opera√ß√µes Num√©ricas
   * Rust suporta as opera√ß√µes matem√°ticas b√°sicas que voc√™ espera para todo o n√∫mero tipos: adi√ß√£o,
   * subtra√ß√£o, multiplica√ß√£o, divis√£o e restante. Inteiro a divis√£o trunca em dire√ß√£o a zero para o
   * n√∫mero inteiro mais pr√≥ximo. O c√≥digo a seguir mostra como voc√™ deve usar cada opera√ß√£o
   * num√©rica em um let declara√ß√£o:
   *
   *  // addition
    let sum = 5 + 10;

    // subtraction
    let difference = 95.5 - 4.3;

    // multiplication
    let product = 4 * 30;

    // division
    let quotient = 56.7 / 32.2;
    let truncated = -5 / 3; // Results in -1

    // remainder resto
    let remainder = 43 % 5;
   *Cada express√£o nessas instru√ß√µes usa um operador matem√°tico e avalia para um √∫nico valor, que √© 
   *ent√£o vinculado a uma vari√°vel. Ap√™ndice B cont√©m uma lista de todos os operadores que Rust fornece
   */


   /* O Tipo Booleano
    * Como na maioria das outras linguagens de programa√ß√£o, um tipo booleano em Rust tem dois
    * poss√≠veis valores: true e false. Os booleanos t√™m um byte de tamanho. O tipo booleano em A
    * ferrugem(cargo) √© especificada usando bool. Por exemplo: 
    *  let t = true;

    let f: bool = false; // with explicit type annotation

    A principal maneira de usar valores booleanos √© atrav√©s de condicionais, como um if express√£o.
    WeElcell cobrir como if express√µes funcionam em Rust no ‚ÄúControl Flow‚Äù se√ß√£o.
    */


/* O Tipo de Caractere
   Rust√≥litos char o tipo √© o tipo alfab√©tico mais primitivo da linguagem. Aqui est√£o alguns exemplos de declara√ß√£o char valores:
   let c = 'z';
     let z: char = '‚Ñ§'; // with explicit type annotation
     let heart_eyed_cat = 'üòª';

  Note que especificamos char literais com aspas simples, ao contr√°rio de string literais, que usam
  aspas duplas. Rust√≥litos char o tipo √© quatro bytes no tamanho e representa um Unicode Scalar
  Value, o que significa que pode representar muito mais do que apenas ASCII. Letras acentuadas;
  Chin√™s, Japon√™s e Coreano; emoji; e espa√ßos de largura zero s√£o todos v√°lidos char valores em
  Rust. Unicode Scalar Os valores variam de U+0000 para U+D7FF e U+E000 para U+10FFFF inclusivo.
  No entanto, um ‚Äúcharacter‚Äù √© realmente um conceito em Unicode, ent√£o seu humano a intui√ß√£o
  para o que √© um ‚Äúcharacter‚Äù pode n√£o corresponder ao que √© um char est√° dentro Ferrugem.
  Weilitll discutir este tema em detalhes em ‚ÄúStoring Texto Codificado UTF-8 com Strings‚Äù no cap√≠tulo 8.

/* Tipos Compostos
Tipos compostos pode agrupar v√°rios valores em um tipo. Rust tem dois tipos compostos primitivos: tuplas e matrizes.
    */


/* TUPLE(Tupla)
 * A tupla √© uma maneira geral de agrupar um n√∫mero de valores com um variedade de tipos em um tipo composto.
 * As tuplas t√™m um comprimento fixo: uma vez declarado, eles n√£o podem crescer ou encolher em tamanho.
 * Criamos uma tupla escrevendo uma lista de valores separados por v√≠rgulas dentro dela par√™nteses.
 *  Cada posi√ß√£o na tupla tem um tipo, e os tipos de valores diferentes na tupla don‚Äôt t√™m que ser os
 * mesmos. Weilitve adicionado opcional digite anota√ß√µes neste exemplo:
 
let tup: (i32, f64, u8) = (500, 6.4, 1);
A vari√°vel tup liga-se a toda a tupla porque uma tupla √© considerada uma elemento composto √∫nico.
  Para tirar os valores individuais de uma tupla, podemos use a correspond√™ncia de padr√µes para desestruturar um valor de tupla, assim:
      let tup = (500, 6.4, 1);

    let (x, y, z) = tup;

    println!("The value of y is: {y}");

    Este programa primeiro cria uma tupla e a liga √† vari√°vel tup. Ent√£o usa um padr√£o com let
    tomar tup e transform√°-lo em tr√™s separados vari√°veis, x, y, e z. Isso √© chamado desestrutura√ß√£o
    porque quebra a √∫nica tupla em tr√™s partes. Finalmente, o programa imprime o valor de y, o que √© 6.4.
        Tamb√©m podemos acessar um elemento de tupla diretamente usando um ponto (.) seguido por o √≠ndice do valor
        que queremos acessar. Por exemplo:
        let x: (i32, f64, u8) = (500, 6.4, 1);

    let five_hundred = x.0;

    let six_point_four = x.1;

    let one = x.2;
    Este programa cria a tupla x e ent√£o acessa cada elemento da tupla usando seus respectivos √≠ndices.
    Como a maioria das linguagens de programa√ß√£o, a primeira o √≠ndice em uma tupla √© 0.
    A tupla sem quaisquer valores tem um nome especial, unidade.
    Esse valor e seu o tipo correspondente √© escrito () e representam um valor vazio ou um tipo de retorno vazio.
    As express√µes implicitamente retornam o valor unit√°rio se elas n√£o forem aceitas devolver qualquer outro valor.
        
*/


/* Array(Matriz/Lista)
 * Outra maneira de ter uma cole√ß√£o de v√°rios valores √© com um matriz. Diferente uma tupla, cada
 * elemento de uma matriz deve ter o mesmo tipo. Ao contr√°rio de arrays em algumas outras
 * linguagens, arrays em Rust t√™m um comprimento fixo.
 * Escrevemos os valores em uma matriz como uma lista separada por v√≠rgulas dentro do quadrado
 * suportes:
 *
 * let a = [1, 2, 3, 4, 5];
 *
 * As matrizes s√£o √∫teis quando voc√™ deseja que seus dados sejam alocados na pilha, em vez de
 * a pilha (vamos discutir a pilha e a pilha mais em Cap√≠tulo 4) ou quando voc√™ quer garantir que voc√™
 * sempre tem um n√∫mero fixo de elementos. Uma matriz √© t√£o flex√≠vel quanto o tipo de vetor
 * embora. A vetor √© um tipo de cole√ß√£o similar fornecido pelo padr√£o biblioteca que √© permitido
 * crescer ou encolher em tamanho. Se voc√™ n√£o tiver certeza se para usar uma matriz ou um vetor, √©
 * prov√°vel que voc√™ use um vetor. Cap√≠tulo 8 discute vetores com mais detalhes.
 * No entanto, arrays s√£o mais √∫teis quando voc√™ sabe que o n√∫mero de elementos n√£o precisa mudar.
 * Por exemplo, se voc√™ estiver usando os nomes do m√™s em um programa, voc√™
 * provavelmente usaria uma matriz em vez de um vetor porque voc√™ sabe ele sempre conter√° 12 elementos:

 * let months = ["January", "February", "March", "April", "May", "June", "July","August", "September", "October", "November", "December"];
 * Voc√™ escreve um tipo de arrayetts usando colchetes com o tipo de cada elemento um ponto-e-v√≠rgula e, em seguida, o n√∫mero de elementos na matriz, como assim:
 *  let a: [i32; 5] = [1, 2, 3, 4, 5];
 * Aqui, i32 √© o tipo de cada elemento. Depois do ponto e v√≠rgula, o n√∫mero 5 indica que a matriz cont√©m cinco elementos.
 * Voc√™ tamb√©m pode inicializar uma matriz para conter o mesmo valor para cada elemento por
 * especificando o valor inicial, seguido por um ponto-e-v√≠rgula e, em seguida, o comprimento de a
 * matriz entre colchetes, como mostrado aqui:
 * let a = [3; 5];
 * A matriz nomeada a conter√° 5 elementos que ser√£o todos definidos para o valor 3 inicialmente.
 * o mesmo que escrever let a = [3, 3, 3, 3, 3]; mas em um maneira mais concisa.
 *
 * Acessando Elementos de Matriz
 * - Uma matriz √© um √∫nico peda√ßo de mem√≥ria de um tamanho fixo conhecido que pode ser alocado
 * - na pilha. Voc√™ pode acessar elementos de um array usando indexa√ß√£o assim:
 * - let a = [1, 2, 3, 4, 5];

    let first = a[0];
    let second = a[1];
 * Neste exemplo, a vari√°vel nomeada first vai receber o valor 1 porque isso √© o valor no √≠ndice
 * [0] na matriz. A vari√°vel nomeada second vai conseguir o valor 2 do √≠ndice [1] na matriz.
 *
 *
 * Acesso Invalido ao Elemento Array
 * Letilits ver o que acontece se voc√™ tentar acessar um elemento de uma matriz que √© passado o fim
 * da matriz. Digamos que voc√™ execute este c√≥digo, semelhante ao jogo de adivinha√ß√£o em Cap√≠tulo 2,
 * para obter um √≠ndice de matriz do usu√°rio:
 use std::io;

fn main() {
    let a = [1, 2, 3, 4, 5];

    println!("Please enter an array index.");

    let mut index = String::new();

    io::stdin()
        .read_line(&mut index)
        .expect("Failed to read line");

    let index: usize = index
        .trim()
        .parse()
        .expect("Index entered was not a number");

    let element = a[index];

    println!("The value of the element at index {index} is: {element}");
}
* Este c√≥digo compila com sucesso. Se voc√™ executar este c√≥digo usando cargo run e entrar 0 1 2
* 3, ou 4, o programa imprimir√° o correspondente valor nesse √≠ndice na matriz. Se voc√™ inserir um
* n√∫mero ap√≥s o final de a matriz, como 10, youilitll ver sa√≠da como esta:
 * thread 'main' panicked at src/main.rs:19:19:
  index out of bounds: the len is 5 but the index is 10
  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
* O programa resultou em um tempo de execu√ß√£o erro no ponto de usar um inv√°lido valor na
* opera√ß√£o de indexa√ß√£o. O programa saiu com uma mensagem de erro e didelitt executar a final println! declara√ß√£o.
* Quando voc√™ tenta acessar um elemento usando indexa√ß√£o, Rust ir√° verificar se o √≠ndice especificado √© menor do que o comprimento da matriz.
* Se o √≠ndice for maior ou igual ao comprimento, A ferrugem entrar√° em p√¢nico.
* Esta verifica√ß√£o tem que acontecer em tempo de execu√ß√£o, especialmente neste caso porque o compilador pode descobrir qual o valor
* que um usu√°rio ir√° inserir quando execute o c√≥digo mais tarde.
* Este √© um exemplo dos princ√≠pios de seguran√ßa de mem√≥ria Rustilitis em a√ß√£o.
* Em muitos linguagens de baixo n√≠vel, esse tipo de verifica√ß√£o n√£o √© feito e quando voc√™ fornece um √≠ndice incorreto, mem√≥ria inv√°lida pode ser acessada.
* A ferrugem protege-te contra isto tipo de erro saindo imediatamente em vez de permitir o acesso √† mem√≥ria e continuando.
* O Cap√≠tulo 9 discute mais sobre o tratamento de erros do Rustetts e como voc√™ pode escreva c√≥digo leg√≠vel e seguro que n√£o entre em p√¢nico nem permita acesso inv√°lido √† mem√≥ria.
* 
*/




}
